from agent import Agent
from fenix import FenixState, FenixAction
import tempfile
import ctypes
import base64
import sys
import sysconfig

class CAgent(Agent):
    def act(self, state: FenixState, remaining_time: float) -> FenixAction:
        stateBytes = ctypes.create_string_buffer(60)
        stateBytes[0] = 1 if state.current_player == 1 else 255
        k = 1
        for i in range(7):
            for j in range(8):
                piece = state.pieces.get((i, j), 0)
                if piece < 0: piece = 256 + piece
                stateBytes[k] = piece
                k += 1
        stateBytes[57] = state.can_create_king
        stateBytes[58] = state.can_create_general
        stateBytes[59] = min(state.turn, 10)
        captures = ctypes.create_string_buffer(42)
        move = agentLibrary.act(stateBytes, remaining_time, captures)
        return FenixAction(
            (int.from_bytes(move.startI, sys.byteorder), int.from_bytes(move.startJ, sys.byteorder)), 
            (int.from_bytes(move.endI, sys.byteorder), int.from_bytes(move.endJ, sys.byteorder)), 
            frozenset((int.from_bytes(captures[2*i]), int.from_bytes(captures[2*i+1])) for i in range(move.nCaptures))
        )
      
# Link with C library
agent = {'linux-aarch64': '', 'macos-aarch64': '', 'linux-x86_64': '', 'windows-x86_64': '', 'windows-aarch64': '', 'macos-x86_64': ''}

# Load shared library from temporary file
arch = sysconfig.get_platform()
libraryFile = tempfile.NamedTemporaryFile(suffix=".so")
libraryFile.write(base64.b64decode(agent[arch]))
agentLibrary = ctypes.CDLL(libraryFile.name)
libraryFile.close()

# Declare functions
class Move(ctypes.Structure):
    _fields_ = [
        ("startI", ctypes.c_char), 
        ("startJ", ctypes.c_char),
        ("endI", ctypes.c_char),
        ("endJ", ctypes.c_char),
        ("nCaptures", ctypes.c_int),
    ]

agentLibrary.act.argtypes = [ctypes.c_char_p, ctypes.c_double, ctypes.c_char_p]
agentLibrary.act.restype = Move
agentLibrary.init()


""" C CODE
FENIX.H

#ifndef FENIX_H
#define FENIX_H

#include <stdint.h>
#include <stdbool.h>


// Board size
#define SI 7
#define SJ 8

/**
 * @brief Game state
**/
typedef struct {
    uint64_t currentPieces; // Current player pieces
    uint64_t opponentPieces; // Opponent pieces
    uint32_t currentSpecial; // Current (general0, general1, general2, king), flags
    uint32_t opponentSpecial; // Opponent (general0, general1, general2, king)
    uint64_t hash; // Hash of the state
} state_t;

// Moves
#define PIECE(index) (1ULL << (index))
#define BOARD_HAS(board, index) ((board) >> (index) & 1)
#define BOARD_TRUE(board, index) ((board) |= PIECE(index))
#define BOARD_FALSE(board, index) ((board) &= ~PIECE(index))
#define VERTICAL_SHIFT(n) ((n) << 3)
#define HORIZONTAL_SHIFT(n) (n)
#define UP_ROW (PIECE(SJ) - 1)
#define DOWN_ROW (UP_ROW << VERTICAL_SHIFT(SI-1))
#define LEFT_COLUMN (PIECE(0) | PIECE(8) | PIECE(16) | PIECE(24) | PIECE(32) | PIECE(40) | PIECE(48))
#define RIGHT_COLUMN (LEFT_COLUMN << HORIZONTAL_SHIFT(SJ-1))
#define MOVE_UP(board, n) ((board) >> VERTICAL_SHIFT(n))
#define MOVE_DOWN(board, n) ((board) << VERTICAL_SHIFT(n))
#define MOVE_LEFT(board, n) ((board) >> HORIZONTAL_SHIFT(n))
#define MOVE_RIGHT(board, n) ((board) << HORIZONTAL_SHIFT(n))
#define BOARD_UP(board) MOVE_UP((board) & ~UP_ROW, 1)
#define BOARD_DOWN(board) MOVE_DOWN((board) & ~DOWN_ROW, 1)
#define BOARD_LEFT(board) MOVE_LEFT((board) & ~LEFT_COLUMN, 1)
#define BOARD_RIGHT(board) MOVE_RIGHT((board) & ~RIGHT_COLUMN, 1)

// Special pieces
#define PIECE_SHIFT(i) ((i) * 7)
#define PIECE_HAS(specialPieces, i) ((specialPieces) >> PIECE_SHIFT(i) & 1)
#define PIECE_TRUE(specialPieces, i) ((specialPieces) |= 1 << PIECE_SHIFT(i))
#define PIECE_FALSE(specialPieces, i) ((specialPieces) &= ~(1 << PIECE_SHIFT(i)))
#define PIECE_INDEX(specialPieces, i) ((specialPieces) >> (PIECE_SHIFT(i) + 1) & 63)
#define PIECE_INDEX_SET(specialPieces, i, index) ((specialPieces) = ((specialPieces) & ~(63 << (PIECE_SHIFT(i) + 1))) | ((index) << (PIECE_SHIFT(i) + 1)))
#define GENERALS_MASK (1 << PIECE_SHIFT(0) | 1 << PIECE_SHIFT(1) | 1 << PIECE_SHIFT(2))
#define SPECIALS_MASK (GENERALS_MASK | (1 << PIECE_SHIFT(3)))
#define COUNT_GENERALS(specialPieces) (__builtin_popcountl((specialPieces) & GENERALS_MASK))
#define COUNT_SPECIALS(specialPieces) (__builtin_popcountl((specialPieces) & SPECIALS_MASK))

// Flags
#define FOUR_GENERALS(specialPieces) ((specialPieces) >> 28 & 1)
#define FOUR_GENERALS_TRUE(specialPieces) ((specialPieces) |= 1 << 28)
#define FOUR_GENERALS_FALSE(specialPieces) ((specialPieces) &= ~(1 << 28))
#define CAN_CREATE_KING(specialPieces) ((specialPieces) >> 29 & 1)
#define CAN_CREATE_KING_TRUE(specialPieces) ((specialPieces) |= 1 << 29)
#define CAN_CREATE_KING_FALSE(specialPieces) ((specialPieces) &= ~(1 << 29))
#define CAN_CREATE_GENERAL(specialPieces) ((specialPieces) >> 30 & 1)
#define CAN_CREATE_GENERAL_TRUE(specialPieces) ((specialPieces) |= 1 << 30)
#define CAN_CREATE_GENERAL_FALSE(specialPieces) ((specialPieces) &= ~(1 << 30))
#define FIRST_MOVES(specialPieces) ((specialPieces) >> 31 & 1)
#define FIRST_MOVES_TRUE(specialPieces) ((specialPieces) |= 1 << 31)
#define FIRST_MOVES_FALSE(specialPieces) ((specialPieces) &= ~(1 << 31))
#define PLAYER(specialPieces) ((specialPieces) >> 29 & 1)
#define PLAYER_SET(opponentSpecial, player) ((opponentSpecial) = ((opponentSpecial) & ~(1 << 29)) | ((player) << 29))
#define CURRENT_TYPE(opponentSpecial, type) (((type) << 1) + PLAYER(opponentSpecial))
#define OPPONENT_TYPE(opponentSpecial, type) (((type) << 1) + !PLAYER(opponentSpecial))

// Index <-> i, j
#define INDEX(i, j) (((i) << 3) | (j))
#define INDEX_I(index) ((index) >> 3)
#define INDEX_J(index) ((index) & 7)

// Iter on filled bitboard positions
#define ITER_START(board) (board)
#define ITER_HAS(iter) ((iter) != 0)
#define ITER_NEXT(iter, index) ((index) = __builtin_ctzll(iter), (iter) &= ~PIECE(index))
#define COUNT(board) (__builtin_popcountll(board))
#define FIRST(board) (__builtin_ctzll(board))
#define LAST(board) (63 - __builtin_clzll(board))

// (-1, 0), (0, -1), (1, 0), (0, 1)
#define DIR_I(d) ((((d) & 1) - 1) & (((d) & 2) - 1))
#define DIR_J(d) (-((d) & 1) & (((d) & 2) - 1))

// (-1, -1), (-1, 1), (1, -1), (1, 1)
#define DIAG_I(d) (((d) & 2) - 1)
#define DIAG_J(d) ((((d) & 1) << 1) - 1)


/**
 * @brief List of actions
**/
typedef struct {
    state_t* actions; // The actions
    int length; // Number of actions in the list
    int capacity; // Capacity of the list
    int captures; // Number of captures
} actions_t;


/**
 * @brief Initialization for zobrist hashing
**/
void initZobrist();


/**
 * @brief Create an empty list of actions
**/
void createActions(actions_t* actions);


/**
 * @brief List all possible initialization actions from a state
 * @param state The state
 * @param actions Action list to add the actions to
**/
void initialActions(state_t* state, actions_t* actions);


/**
 * @brief List all possible capture actions from a state
 * @param state The state
 * @param actions Action list to add the actions to
**/
void captureActions(state_t* state, actions_t* actions);


/**
 * @brief List all possible move actions from a state
 * @param state The state
 * @param actions Action list to add the actions to
**/
void moveActions(state_t* state, actions_t* actions, bool forceAll);


/**
 * @brief List all possible actions from a state
 * @param state The state
 * @param actions Action list to add the actions to
**/
void allActions(state_t* state, actions_t* actions);


/**
 * @brief Score for a terminal state for the current player, or NON_TERMINAL if the state is not terminal
**/
int16_t terminalScore(const state_t* state);

#define NON_TERMINAL INT16_MIN



/**
 * @brief Move to return to python
**/
typedef struct {
    char startI, startJ, endI, endJ; // Move start and end
    int nCaptures; // Number of captures
} move_t;


/**
 * @brief Create a state from a buffer from python
 * @param serialized Serialized state
 * @param state Output state
**/
void readState(const signed char* serialized, state_t* state);


/**
 * @brief Compute the move between two states
 * @param from State before the move
 * @param to State after the move
 * @param captures Buffer to store the captures (i, j indices)
**/
move_t moveTo(const state_t* from, const state_t* to, char* captures);


/**
 * @brief Check if two states are equal
 * @param state1 The first state
 * @param state2 The second state
**/
bool stateEqual(const state_t* state1, const state_t* state2);


/**
 * @brief Print a state
**/
void printState(const state_t* state);


#endif


TABLE.H

#ifndef TABLE_H
#define TABLE_H

#include <stdint.h>
#include <stdbool.h>


#define UPPER_BOUND ((uint8_t)1)
#define LOWER_BOUND ((uint8_t)2)
#define EVALUATION_USED ((uint8_t)4)


// Transposition table
extern uint64_t table[];

#define MASK(size) ((1ULL << (size)) - 1)
#define TABLE_SIZE 28
#define KEY_SIZE 34
#define SCORE_SIZE 16
#define MOVE_SIZE 6
#define DEPTH_SIZE 5
#define FLAGS_SIZE 3
#define KEY_INDEX(key) ((key) & MASK(TABLE_SIZE))
#define STORED_KEY(key) (((key) >> TABLE_SIZE) & MASK(KEY_SIZE))
#define KEY(item) ((item) & MASK(KEY_SIZE))
#define SCORE(item) (((item) >> KEY_SIZE) & MASK(SCORE_SIZE))
#define MOVE(item) (((item) >> (KEY_SIZE + SCORE_SIZE)) & MASK(MOVE_SIZE))
#define DEPTH(item) (((item) >> (KEY_SIZE + SCORE_SIZE + MOVE_SIZE)) & MASK(DEPTH_SIZE))
#define FLAGS(item) (((item) >> (KEY_SIZE + SCORE_SIZE + MOVE_SIZE + DEPTH_SIZE)) & MASK(FLAGS_SIZE))
#define KEY_SET(item, key) ((item) |= (uint64_t)(key))
#define SCORE_SET(item, score) ((item) |= (uint64_t)(score) << KEY_SIZE)
#define MOVE_SET(item, move) ((item) |= (uint64_t)(move) << (KEY_SIZE + SCORE_SIZE))
#define DEPTH_SET(item, depth) ((item) |= (uint64_t)(depth) << (KEY_SIZE + SCORE_SIZE + MOVE_SIZE))
#define FLAGS_SET(item, flags) ((item) |= (uint64_t)(flags) << (KEY_SIZE + SCORE_SIZE + MOVE_SIZE + DEPTH_SIZE))


/**
 * @brief Put an item in the transposition table
**/
void tablePut(uint64_t key, unsigned int score, unsigned int move, unsigned int depth, unsigned int flags);


/**
 * @brief Get an item from the transposition table, return true if it is valid
**/
bool tableGet(uint64_t key, unsigned int* score, unsigned int* move, unsigned int* depth, unsigned int* flags);


#endif


LIST.H

#ifndef LIST_H
#define LIST_H

#include <stdlib.h>
#include <stdint.h>


/**
 * @brief Resizable list
 * @param type Type of the elements in the list
**/
#define LIST(type) struct list_##type


/**
 * @brief Declare a new list type
 * @param type Type of the elements in the list
**/
#define LIST_DECLARE(type) struct list_##type { \
    type* values; \
    uint32_t length; \
    uint32_t capacity; \
}


/**
 * @brief Create a new list
 * @param type Type of the elements in the list
 * @param initialCapacity : initial capacity of the list (should be an approximation of the maximum length)
 * @return The list (values must be freed)
**/
#define LIST_CREATE(type, initialCapacity) (LIST(type)){ \
    .values = malloc(sizeof(type) * (initialCapacity)), \
    .length = 0, \
    .capacity = (initialCapacity) \
}


/**
 * @brief Add an element at the end of a list
 * @param list The list
 * @param value The value to add
**/
#define LIST_ADD(list, value) ( \
    ((list).length < (list).capacity ? \
    (list).values : \
    ((list).values = realloc((list).values, sizeof(*(list).values) * ((list).capacity *= 2)))) \
    [(list).length] = (value), (list).length++)
    

#endif


TABLE.C

#include "table.h"
#include <stdbool.h>


uint64_t table[1 << TABLE_SIZE];


void tablePut(uint64_t key, unsigned int score, unsigned int move, unsigned int depth, unsigned int flags) {
    int index = KEY_INDEX(key);
    uint64_t storedKey = STORED_KEY(key);
    uint64_t item = table[index];
    if (FLAGS(item) == 0 || KEY(item) != storedKey || depth >= DEPTH(item)) { // Replace item
        move &= MASK(MOVE_SIZE);
        item = 0;
        KEY_SET(item, storedKey);
        SCORE_SET(item, score);
        MOVE_SET(item, move);
        DEPTH_SET(item, depth);
        FLAGS_SET(item, flags);
        table[index] = item;
    }
}


bool tableGet(uint64_t key, unsigned int* score, unsigned int* move, unsigned int* depth, unsigned int* flags) {
    uint64_t item = table[KEY_INDEX(key)];
    if (FLAGS(item) != 0 && KEY(item) == STORED_KEY(key)) {
        *score = SCORE(item);
        *move = MOVE(item);
        *depth = DEPTH(item);
        *flags = FLAGS(item);
        return true;
    }
    return false;
}



AGENT.C

#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>
#include <stdbool.h>
#include <limits.h>
#include <sys/time.h>
#include <pthread.h>
#include <semaphore.h>
#include "fenix.h"
#include "table.h"
#include "list.h"


// Constants
#define SCORE_MAX ((1 << 15) - 1)
#define WINDOW_SIZE (SCORE_MAX / 100)
#define N_THREADS 8
#define MAX_OFFSET 1

// Time limit
int checkTimeCount;
struct timeval softLimit;
bool softLimitExceeded;
struct timeval hardLimit; 
bool hardLimitExceeded;

// Boring moves
LIST_DECLARE(uint64_t);
LIST(uint64_t) boringStates;
LIST(uint64_t) reachableStates;
bool nextBoring;

// Tasks
typedef struct {
    int action;
    int depth;
} task_t;

actions_t actions;
int16_t* scores;
task_t* tasks;
int firstTask;
int nextTask;
int finished[32];
int globalDepth;

pthread_mutex_t mutex;
sem_t offsetSemaphore[MAX_OFFSET + 2];
int nOffsetBlocked;


// Agent initialization
void init() {
    initZobrist();
    boringStates = LIST_CREATE(uint64_t, 1);
    reachableStates = LIST_CREATE(uint64_t, 1);
}



// Quickly evaluate a state
static int16_t score(state_t* state) {
    if (FIRST_MOVES(state->currentSpecial)) return 0;

    // Score from pieces (0-24)
    uint64_t current = state->currentPieces;
    int16_t currentPieces = COUNT(current) + COUNT_SPECIALS(state->currentSpecial) * 3;
    uint64_t opponent = state->opponentPieces;
    int16_t opponentPieces = COUNT(opponent) + COUNT_SPECIALS(state->opponentSpecial) * 3;

    // Score from pieces with no friendly neighbors in a row or column (0-42)
    uint64_t notCurrent = ~current & (PIECE(SI*SJ) - 1);
    int16_t currentSafety = 
        COUNT(current & ~(BOARD_UP(notCurrent) & BOARD_DOWN(notCurrent))) + 
        COUNT(current & ~(BOARD_LEFT(notCurrent) & BOARD_RIGHT(notCurrent)));
    uint64_t notOpponent = ~opponent & (PIECE(SI*SJ) - 1);
    int16_t opponentSafety =
        COUNT(opponent & ~(BOARD_UP(notOpponent) & BOARD_DOWN(notOpponent))) + 
        COUNT(opponent & ~(BOARD_LEFT(notOpponent) & BOARD_RIGHT(notOpponent)));

    // Score from general possible movements (0-52)
    /*uint64_t filled = current | opponent;
    int16_t currentGeneral = 0;
    for (int i = 0; i < 3 + FOUR_GENERALS(state->currentSpecial); i++) {
        if (PIECE_HAS(state->currentSpecial, i)) {
            int index = PIECE_INDEX(state->currentSpecial, i);
            uint64_t piece = PIECE(index);
            uint64_t row = filled & MOVE_DOWN(UP_ROW, INDEX_I(index));
            uint64_t beforeRow = row & (piece-1), afterRow = row & ~((piece-1) | piece);
            uint64_t column = filled & MOVE_RIGHT(LEFT_COLUMN, INDEX_J(index));
            uint64_t beforeColumn = column & (piece-1), afterColumn = column & ~((piece-1) | piece);
            currentGeneral += beforeRow ? index - LAST(beforeRow) - 1 : INDEX_J(index);
            currentGeneral += afterRow ? FIRST(afterRow) - index - 1 : SJ - INDEX_J(index) - 1;
            currentGeneral += beforeColumn ? (index - LAST(beforeColumn) - 1) >> 3 : INDEX_I(index);
            currentGeneral += afterColumn ? (FIRST(afterColumn) - index - 1) >> 3 : SI - INDEX_I(index) - 1;
        }
    }
    int16_t opponentGeneral = 0;
    for (int i = 0; i < 3 + FOUR_GENERALS(state->opponentSpecial); i++) {
        if (PIECE_HAS(state->opponentSpecial, i)) {
            int index = PIECE_INDEX(state->opponentSpecial, i);
            uint64_t piece = PIECE(index);
            uint64_t row = filled & MOVE_DOWN(UP_ROW, INDEX_I(index));
            uint64_t beforeRow = row & (piece-1), afterRow = row & ~((piece-1) | piece);
            uint64_t column = filled & MOVE_RIGHT(LEFT_COLUMN, INDEX_J(index));
            uint64_t beforeColumn = column & (piece-1), afterColumn = column & ~((piece-1) | piece);
            opponentGeneral += beforeRow ? index - LAST(beforeRow) - 1 : INDEX_J(index);
            opponentGeneral += afterRow ? FIRST(afterRow) - index - 1 : SJ - INDEX_J(index) - 1;
            opponentGeneral += beforeColumn ? (index - LAST(beforeColumn) - 1) >> 3 : INDEX_I(index);
            opponentGeneral += afterColumn ? (FIRST(afterColumn) - index - 1) >> 3 : SI - INDEX_I(index) - 1;
        }
    }*/

    // Combine scores
    int16_t currentScore = 128 * currentPieces + currentSafety;
    int16_t opponentScore = 128 * opponentPieces + opponentSafety;

    int16_t score = ((int32_t)(currentScore - opponentScore) * SCORE_MAX) / (currentScore + opponentScore);
    return score;
}


// Check if a state is terminal because of boring conditions
static bool terminalBoring(state_t* state, state_t* previousState) {
    uint64_t hash = state->hash;
    if (boringStates.length + (previousState != NULL) >= 49) return true;
    int count = 0;
    for (int i = 0; i < boringStates.length; i++) {
        if (hash == boringStates.values[i]) count++;
    }
    if (previousState != NULL && hash == previousState->hash) count++;
    if (count >= 2) return true;
    return false;
}


// Min and max minimax functions at the same time (alpha, beta and score are reversed to switch between min and max)
static int16_t negamax(state_t* state, int16_t depth, int16_t globalDepth, int16_t alpha, int16_t beta, bool* evaluationUsed) {
    // Check time limit
    if (checkTimeCount++ > 4096 && (!softLimitExceeded || !hardLimitExceeded)) {
        checkTimeCount = 0;
        struct timeval now;
        gettimeofday(&now, NULL);
        if (!softLimitExceeded) {
            double remainingTime = (double)(softLimit.tv_sec - now.tv_sec) + (double)(softLimit.tv_usec - now.tv_usec) / 1e6;
            if (remainingTime < 0) {
                softLimitExceeded = true;
                //printf("Soft limit exceeded: %lf\n", remainingTime);
            }
        }
        if (!hardLimitExceeded) {
            double remainingTime = (double)(hardLimit.tv_sec - now.tv_sec) + (double)(hardLimit.tv_usec - now.tv_usec) / 1e6;
            if (remainingTime < 0) {
                hardLimitExceeded = true;
                //printf("Hard limit exceeded: %lf\n", remainingTime);
                return 0;
            }
        }
    }
    int16_t effectiveDepth = depth;
    if (softLimitExceeded) effectiveDepth--;
    if (effectiveDepth < 0) effectiveDepth = 0;

    // Evaluation function
    if (FIRST_MOVES(state->currentSpecial) && effectiveDepth == 0) {
        *evaluationUsed = true;
        return score(state);
    }

    // Check transposition table
    int16_t originalAlpha = alpha;
    uint64_t hash = state->hash;
    unsigned int tableScore, tableMove, tableDepth, tableFlags;
    bool hit = globalDepth == depth ? false : tableGet(hash, &tableScore, &tableMove, &tableDepth, &tableFlags);
    if (hit && tableDepth >= effectiveDepth) {
        int16_t signedTableScore = tableScore - SCORE_MAX;
        if (tableFlags & EVALUATION_USED) {
            *evaluationUsed = true;
        }
        if (tableFlags & LOWER_BOUND && signedTableScore > alpha) {
            alpha = signedTableScore;
        }
        if (tableFlags & UPPER_BOUND && signedTableScore < beta) {
            beta = signedTableScore;
        }
        if (alpha >= beta) {
            return signedTableScore;
        }
    }

    // Generate actions
    actions_t actions;
    createActions(&actions);
    if (FIRST_MOVES(state->currentSpecial)) initialActions(state, &actions);
    else {
        captureActions(state, &actions);

        // Quiescence search or evaluation function
        if (effectiveDepth == 0) {
            if (CAN_CREATE_KING(state->currentSpecial) || CAN_CREATE_GENERAL(state->currentSpecial) || actions.length > 0) {
                effectiveDepth = 1;
            }
            else {
                *evaluationUsed = true;
                free(actions.actions);
                return score(state);
            }
        }

        if (actions.length == 0) {
            moveActions(state, &actions, false);
        }
        else if (CAN_CREATE_KING(state->currentSpecial)) { // Should create king but must capture -> loss
            free(actions.actions);
            return -SCORE_MAX;
        }
    }
    if (actions.length == 0) {
        free(actions.actions);
        return -SCORE_MAX;
    }
    
    // Find best action for current depth
    int16_t bestMove = -1;
    int16_t bestScore = INT16_MIN;
    for (int32_t i = 0; i < actions.length; i++) {
        // Try move in table first
        int32_t iOrdered = i;
        if (hit && tableMove >= 0 && tableMove < actions.length) {
            if (i == 0) iOrdered = tableMove;
            else if (i == tableMove) iOrdered = 0;
        }

        // Get score
        state_t* newState = actions.actions + iOrdered;
        int16_t score;
        if (globalDepth == depth && actions.captures == 0 && terminalBoring(newState, state)) score = 0; // Boring
        else {
            int16_t terminal = terminalScore(newState);
            if (terminal != NON_TERMINAL) score = -terminal; // Terminal state
            else { // Recursive call
                bool nextEvaluationUsed = false;
                score = -negamax(newState, depth - 1, globalDepth, -beta, -alpha, &nextEvaluationUsed);
                if (nextEvaluationUsed) *evaluationUsed = true;
                if (softLimitExceeded && depth == effectiveDepth) effectiveDepth--;
                if (hardLimitExceeded) {
                    free(actions.actions);
                    return 0;
                }
            }
        }

        // Update best score
        if (score >= beta) { // Better than needed -> return and put in table as a lower bound
            if (globalDepth != depth) {
                tablePut(hash, score + SCORE_MAX, iOrdered, effectiveDepth, LOWER_BOUND | (*evaluationUsed ? EVALUATION_USED : 0));
            }
            free(actions.actions);
            return score;
        }
        if (score > alpha) alpha = score;
        if (score > bestScore) {
            bestMove = iOrdered;
            bestScore = score;
        }
    }

    // Not pruned -> return best result and put in table as an upper bound or an exact value if greater than alpha
    if (globalDepth != depth) {
        tablePut(hash, bestScore + SCORE_MAX, bestMove, effectiveDepth, UPPER_BOUND | (bestScore > originalAlpha ? LOWER_BOUND : 0) | (*evaluationUsed ? EVALUATION_USED : 0));
    }
    free(actions.actions);
    return bestScore;
}



// Find the score of a state using aspiration windows
static int16_t aspirationWindows(state_t* state, int16_t previousScore, int depth, bool* evaluationUsed) {
    int32_t windowAlpha = previousScore - WINDOW_SIZE;
    if (windowAlpha < -SCORE_MAX) windowAlpha = -SCORE_MAX;
    int32_t windowBeta = previousScore + WINDOW_SIZE;
    if (windowBeta > SCORE_MAX) windowBeta = SCORE_MAX;
    int32_t inc = 3 * WINDOW_SIZE;
    while (true) {
        int16_t score = negamax(state, depth, depth, windowAlpha, windowBeta, evaluationUsed);
        if (hardLimitExceeded) return 0;
        if (score < SCORE_MAX && score >= windowBeta) {
            windowBeta += inc;
            if (windowBeta > SCORE_MAX) windowBeta = SCORE_MAX;
            inc <<= 1;
        }
        else if (score > -SCORE_MAX && score <= windowAlpha) {
            windowAlpha -= inc;
            if (windowAlpha < -SCORE_MAX) windowAlpha = -SCORE_MAX;
            inc <<= 1;
        }
        else return score;
    }
}


// Execute search tasks for a given ammount of time
static void* iterativeDeepeningThread(void* arg) {
    task_t task = *(task_t*)arg;
    bool wait;
    do {
        // Execute task
        state_t* newState = actions.actions + task.action;
        bool evaluationUsed = false;
        int16_t score;
        if (actions.captures == 0 && terminalBoring(newState, NULL)) score = 0; // Boring
        else {
            int16_t terminal = terminalScore(newState);
            if (terminal != NON_TERMINAL) score = -terminal; // Terminal state
            else score = -aspirationWindows(newState, -scores[task.action], task.depth, &evaluationUsed);
            scores[task.action] = score;
        }
        scores[task.action] = score;
        if (hardLimitExceeded || task.depth == 31) break;

        // Get next task
        pthread_mutex_lock(&mutex);
        //printf("Finished depth %d of %d (%ld)\n", task.depth, task.action, pthread_self());
        finished[task.depth]++;
        if (finished[task.depth] == actions.length) {
            //printf("Releasing %d threads (%ld %d)\n", nOffsetBlocked, pthread_self(), (task.depth + MAX_OFFSET + 1) % (MAX_OFFSET + 2));
            globalDepth++;
            for (int i = 0; i < nOffsetBlocked; i++) {
                sem_post(offsetSemaphore + (task.depth + MAX_OFFSET + 1) % (MAX_OFFSET + 2));
            }
            nOffsetBlocked = 0;
        }
        if (evaluationUsed) {
            tasks[nextTask++] = (task_t){ .action = task.action, .depth = task.depth + 1 };
            if (nextTask == actions.length) nextTask = 0;
        }
        else {
            //printf("Evaluation not used (%ld)\n", pthread_self());
            for (int i = task.depth + 1; i < 32; i++) {
                finished[i]++;
                if (finished[i] == actions.length) globalDepth++;
            }
            if (firstTask == nextTask) {
                pthread_mutex_unlock(&mutex);
                return NULL;
            }
        }
        task = tasks[firstTask++];
        if (firstTask == actions.length) firstTask = 0;
        if (task.depth - globalDepth > MAX_OFFSET) {
            //printf("Waiting before depth %d of %d (%ld %d)\n", task.depth, task.action, pthread_self(), task.depth % (MAX_OFFSET + 2));
            wait = true;
            nOffsetBlocked++;
        }
        else {
            //printf("Starting depth %d of %d (%ld)\n", task.depth, task.action, pthread_self());
            wait = false;
        }
        pthread_mutex_unlock(&mutex);
        if (wait) sem_wait(offsetSemaphore + task.depth % (MAX_OFFSET + 2));
    } while (!softLimitExceeded && !hardLimitExceeded);

    if (task.depth == globalDepth) {
        //printf("Releasing 1 thread (%ld %d)\n", pthread_self(), (task.depth + MAX_OFFSET + 1) % (MAX_OFFSET + 2));
        sem_post(offsetSemaphore + (task.depth + MAX_OFFSET + 1) % (MAX_OFFSET + 2));
    }
    else if (task.depth - globalDepth > MAX_OFFSET) {
        //printf("Releasing 1 thread (%ld %d)\n", pthread_self(), (task.depth + MAX_OFFSET + 1) % (MAX_OFFSET + 2));
        sem_post(offsetSemaphore + task.depth % (MAX_OFFSET + 2));
    }
    return NULL;
}


//long sumDepth = 0, countDepth = 0;
// Search the tree progressively deeper for a given ammount of time
static int iterativeDeepening(state_t* state, double maxTime) {
    // Initialize global variables
    softLimitExceeded = false;
    hardLimitExceeded = false;
    struct timeval start;
    gettimeofday(&start, NULL);
    double increment = 0.8 * maxTime;
    softLimit.tv_sec = start.tv_sec + (int)increment;
    softLimit.tv_usec = start.tv_usec + (int)((increment - (int)increment) * 1e6);
    if (softLimit.tv_usec >= 1e6) {
        softLimit.tv_sec++;
        softLimit.tv_usec -= 1e6;
    }
    increment = 2 * maxTime;
    hardLimit.tv_sec = start.tv_sec + (int)increment;
    hardLimit.tv_usec = start.tv_usec + (int)((increment - (int)increment) * 1e6);
    if (hardLimit.tv_usec >= 1e6) {
        hardLimit.tv_sec++;
        hardLimit.tv_usec -= 1e6;
    }
    scores = calloc(actions.length, sizeof(*scores));
    tasks = malloc(actions.length * sizeof(*tasks));
    for (int i = 0; i < 32; i++) {
        finished[i] = 0;
    }
    globalDepth = 1;
    nOffsetBlocked = 0;
    pthread_mutex_init(&mutex, NULL);
    for (int i = 0; i < MAX_OFFSET + 2; i++) {
        sem_init(offsetSemaphore + i, 0, 0);
    }

    // Start threads
    pthread_t threads[N_THREADS];
    task_t initialTasks[N_THREADS];
    int nThreads = N_THREADS;
    if (actions.length < N_THREADS) nThreads = actions.length;
    firstTask = 0;
    nextTask = actions.length - nThreads;
    for (int i = 0; i < actions.length - nThreads; i++) {
        tasks[i].action = actions.length - 1 - i;
        tasks[i].depth = 1;
    }
    for (int i = 0; i < nThreads; i++) {
        initialTasks[i] = (task_t){ .action = i, .depth = 1 };
        pthread_create(threads + i, NULL, iterativeDeepeningThread, initialTasks + i);
    }
    for (int i = 0; i < nThreads; i++) {
        pthread_join(threads[i], NULL);
    }

    // Find best action
    int16_t bestScore = scores[0];
    int bestAction = 0;
    int nEqual = 1;
    for (int i = 0; i < actions.length; i++) {
        int16_t score = scores[i];
        if (score > bestScore) {
            bestScore = score;
            bestAction = i;
            nEqual = 1;
        }
        else if (scores[i] == bestScore && (double)rand() / RAND_MAX < 1.0 / nEqual++) {
            bestScore = score;
            bestAction = i;
        }
    }
    
    //printf("Best action: %d %d\n", bestAction, bestScore);
    free(scores);
    free(tasks);
    pthread_mutex_destroy(&mutex);
    for (int i = 0; i < MAX_OFFSET + 2; i++) {
        sem_destroy(offsetSemaphore + i);
    }
    return bestAction;
}


// Choose the best move for a given state in a maximum time
move_t act(signed char* serializedState, double remainingTime, char* captures) {
    double allocatedTime = remainingTime / 20;
    state_t state;
    readState(serializedState, &state);
    uint64_t hash = state.hash;

    // Reset boring moves if new game
    bool found = false;
    for (int i = 0; i < reachableStates.length; i++) {
        if (reachableStates.values[i] == hash) {
            found = true;
            break;
        }
    }
    if (!found) {
        boringStates.length = 0;
        nextBoring = false;
    }
    if (!nextBoring) boringStates.length = 0;
    else if (!FIRST_MOVES(state.currentSpecial)) {
        LIST_ADD(boringStates, hash);
    }

    // Generate actions
    createActions(&actions);
    if (FIRST_MOVES(state.currentSpecial)) initialActions(&state, &actions);
    else {
        captureActions(&state, &actions);
        if (actions.length == 0) {
            moveActions(&state, &actions, true);
        }
        else boringStates.length = 0;
    }

    int32_t best;
    if (actions.length == 1) best = 0;
    else best = iterativeDeepening(&state, allocatedTime);
    state_t* nextState = actions.actions + best;
    move_t move = moveTo(&state, nextState, captures);

    // Update boring moves
    if (move.nCaptures > 0) boringStates.length = 0;
    else if (!FIRST_MOVES(nextState->currentSpecial)) LIST_ADD(boringStates, nextState->hash);
    if (terminalScore(nextState) == NON_TERMINAL) {
        actions_t reachableActions;
        createActions(&reachableActions);
        if (FIRST_MOVES(nextState->currentSpecial)) initialActions(nextState, &reachableActions);
        else {
            captureActions(nextState, &reachableActions);
            if (reachableActions.length == 0) {
                moveActions(nextState, &reachableActions, false);
                nextBoring = true;
            }
            else nextBoring = false;
        }
        reachableStates.length = 0;
        for (int32_t i = 0; i < reachableActions.length; i++) {
            LIST_ADD(reachableStates, reachableActions.actions[i].hash);
        }
        free(reachableActions.actions);
    }

    free(actions.actions);
    return move;
}



FENIX.C

#include "fenix.h"
#include <stdlib.h>
#include <stdint.h>
#include <stdbool.h>
#include <stdio.h>


static uint64_t zobristNumbers[SI * SJ][6]; // Zobrist numbers for each piece on each tile
static uint64_t zobristNumberPlayer; // Zobrist number for player 1
static uint64_t zobristNumberKing; // Zobrist number for canCreateKing
static uint64_t zobristNumberGeneral; // Zobrist number for canCreateGeneral


void initZobrist() {
    srand(314);
    for (int i = 0; i < SI * SJ; i++) {
        for (int k = 0; k < 6; k++) {
            zobristNumbers[i][k] = ((uint64_t)rand() << 32) | rand();
        }
    }
    zobristNumberPlayer = ((uint64_t)rand() << 32) | rand();
    zobristNumberKing = ((uint64_t)rand() << 32) | rand();
    zobristNumberGeneral = ((uint64_t)rand() << 32) | rand();
}


void createActions(actions_t* actions) {
    actions->actions = malloc(8 * sizeof(*actions->actions));
    actions->capacity = 8;
    actions->length = 0;
    actions->captures = 0;
}


// Add a new action to a list of actions and return a pointer to it
static state_t* addAction(actions_t* actions, state_t* originState) {
    if (actions->length == actions->capacity) {
        actions->capacity *= 2;
        actions->actions = realloc(actions->actions, sizeof(*actions->actions) * actions->capacity);
    }
    state_t* newState = actions->actions + actions->length++;
    *newState = *originState;
    uint64_t oldCurrentPieces = newState->currentPieces;
    newState->currentPieces = newState->opponentPieces;
    newState->opponentPieces = oldCurrentPieces;
    uint32_t oldCurrentSpecial = newState->currentSpecial;
    newState->currentSpecial = newState->opponentSpecial;
    newState->opponentSpecial = oldCurrentSpecial;
    bool canCreateKing = CAN_CREATE_KING(newState->opponentSpecial);
    bool player = PLAYER(newState->currentSpecial);
    if (canCreateKing) newState->hash ^= zobristNumberKing;
    CAN_CREATE_KING_FALSE(newState->currentSpecial);
    if (CAN_CREATE_GENERAL(newState->opponentSpecial)) newState->hash ^= zobristNumberGeneral;
    CAN_CREATE_GENERAL_FALSE(newState->currentSpecial);
    PLAYER_SET(newState->opponentSpecial, !player);
    newState->hash ^= zobristNumberPlayer;
    return newState;
}


// Add a move action from an index to an index
static inline void moveActionAt(state_t* state, actions_t* actions, int index, int initialIndex) {
    state_t* newState = addAction(actions, state);
    BOARD_FALSE(newState->opponentPieces, initialIndex);
    BOARD_TRUE(newState->opponentPieces, index);
    newState->hash ^= zobristNumbers[initialIndex][OPPONENT_TYPE(newState->opponentSpecial, 0)];
    newState->hash ^= zobristNumbers[index][OPPONENT_TYPE(newState->opponentSpecial, 0)];
}

// Add a move action for a special piece from an index to an index
static inline void moveSpecialActionAt(state_t* state, actions_t* actions, int index, int initialIndex, int i) {
    state_t* newState = addAction(actions, state);
    BOARD_FALSE(newState->opponentPieces, initialIndex);
    BOARD_TRUE(newState->opponentPieces, index);
    PIECE_INDEX_SET(newState->opponentSpecial, i, index);
    newState->hash ^= zobristNumbers[initialIndex][OPPONENT_TYPE(newState->opponentSpecial, 1 + (i == 3))];
    newState->hash ^= zobristNumbers[index][OPPONENT_TYPE(newState->opponentSpecial, 1 + (i == 3))];
}

// List all possible move actions to an empty tile
static void moveToEmpty(state_t* state, actions_t* actions) {
    uint64_t current = state->currentPieces;
    uint64_t opponent = state->opponentPieces;
    uint64_t filled = current | opponent;
    uint64_t empty = ~filled;
    uint64_t special = state->currentSpecial;

    // Keep only soldiers
    uint64_t soldiers = current;
    for (int i = 0; i < 4; i++) {
        if (PIECE_HAS(special, i)) {
            BOARD_FALSE(soldiers, PIECE_INDEX(special, i));
        }
    }

    // Up
    uint64_t moves = BOARD_UP(soldiers) & empty;
    int index;
    uint64_t iter = ITER_START(moves);
    while (ITER_HAS(iter)) {
        ITER_NEXT(iter, index);
        moveActionAt(state, actions, index, index + VERTICAL_SHIFT(1));
    }

    // Down
    moves = BOARD_DOWN(soldiers) & empty;
    iter = ITER_START(moves);
    while (ITER_HAS(iter)) {
        ITER_NEXT(iter, index);
        moveActionAt(state, actions, index, index - VERTICAL_SHIFT(1));
    }

    // Left
    moves = BOARD_LEFT(soldiers) & empty;
    iter = ITER_START(moves);
    while (ITER_HAS(iter)) {
        ITER_NEXT(iter, index);
        moveActionAt(state, actions, index, index + HORIZONTAL_SHIFT(1));
    }

    // Right
    moves = BOARD_RIGHT(soldiers) & empty;
    iter = ITER_START(moves);
    while (ITER_HAS(iter)) {
        ITER_NEXT(iter, index);
        moveActionAt(state, actions, index, index - HORIZONTAL_SHIFT(1));
    }

    // King
    if (PIECE_HAS(special, 3)) {
        int index = PIECE_INDEX(special, 3);
        int pieceI = INDEX_I(index);
        int pieceJ = INDEX_J(index);
        for (int i = 0; i < 4; i++) { // Straight movements
            int newI = pieceI + DIR_I(i);
            if (newI == -1 || newI == SI) continue;
            int newJ = pieceJ + DIR_J(i);
            if (newJ == -1 || newJ == SJ) continue;
            int newIndex = INDEX(newI, newJ);
            if (BOARD_HAS(empty, newIndex)) {
                moveSpecialActionAt(state, actions, newIndex, index, 3);
            }
        }
        for (int i = 0; i < 4; i++) { // Diagonal movements
            int newI = pieceI + DIAG_I(i);
            if (newI == -1 || newI == SI) continue;
            int newJ = pieceJ + DIAG_J(i);
            if (newJ == -1 || newJ == SJ) continue;
            int newIndex = INDEX(newI, newJ);
            if (BOARD_HAS(empty, newIndex)) {
                moveSpecialActionAt(state, actions, newIndex, index, 3);
            }
        }
    }

    // Generals
    for (int i = 0; i < 3; i++) {
        if (!PIECE_HAS(special, i)) continue;
        int index = PIECE_INDEX(special, i);
        int pieceI = INDEX_I(index);

        // Up
        for (int newIndex = index - VERTICAL_SHIFT(1);
            newIndex > -1 && BOARD_HAS(empty, newIndex);
            newIndex -= VERTICAL_SHIFT(1)) {
            moveSpecialActionAt(state, actions, newIndex, index, i);
        }

        // Down
        for (int newIndex = index + VERTICAL_SHIFT(1);
            newIndex < SI * SJ && BOARD_HAS(empty, newIndex);
            newIndex += VERTICAL_SHIFT(1)) {
            moveSpecialActionAt(state, actions, newIndex, index, i);
        }

        // Left
        for (int newIndex = index - HORIZONTAL_SHIFT(1);
            newIndex > -1 + VERTICAL_SHIFT(pieceI) && BOARD_HAS(empty, newIndex);
            newIndex -= HORIZONTAL_SHIFT(1)) {
            moveSpecialActionAt(state, actions, newIndex, index, i);
        }

        // Right
        for (int newIndex = index + HORIZONTAL_SHIFT(1);
            newIndex < SJ + VERTICAL_SHIFT(pieceI) && BOARD_HAS(empty, newIndex);
            newIndex += HORIZONTAL_SHIFT(1)) {
            moveSpecialActionAt(state, actions, newIndex, index, i);
        }
    }
}


// List all possible move actions to create a king
static void moveCreateKing(state_t* state, actions_t* actions) {
    uint64_t current = state->currentPieces;
    uint64_t special = state->currentSpecial;

    // Iter on generals and check their neighbors
    for (int i = 0; i < 3 + FOUR_GENERALS(special); i++) {
        if (!PIECE_HAS(special, i)) continue;
        int index = PIECE_INDEX(special, i);
        int pieceI = INDEX_I(index);
        int pieceJ = INDEX_J(index);
        for (int j = 0; j < 4; j++) { // Straight movements
            int neighI = pieceI + DIR_I(j);
            if (neighI == -1 || neighI == SI) continue;
            int neighJ = pieceJ + DIR_J(j);
            if (neighJ == -1 || neighJ == SJ) continue;
            int neighIndex = INDEX(neighI, neighJ);
            if (BOARD_HAS(current, neighIndex)) { // Current player piece
                for (int k = 0; k < 4; k++) { // Check if not special
                    if (PIECE_HAS(special, k) && neighIndex == PIECE_INDEX(special, k)) goto next;
                }
                state_t* newState = addAction(actions, state);
                BOARD_FALSE(newState->opponentPieces, neighIndex);
                if (FOUR_GENERALS(special)) {
                    PIECE_INDEX_SET(newState->opponentSpecial, i, PIECE_INDEX(special, 3));
                    FOUR_GENERALS_FALSE(newState->opponentSpecial);
                }
                else {
                    PIECE_FALSE(newState->opponentSpecial, i);
                    PIECE_TRUE(newState->opponentSpecial, 3);
                }
                PIECE_INDEX_SET(newState->opponentSpecial, 3, index);
                newState->hash ^= zobristNumbers[neighIndex][OPPONENT_TYPE(newState->opponentSpecial, 0)];
                newState->hash ^= zobristNumbers[index][OPPONENT_TYPE(newState->opponentSpecial, 1)];
                newState->hash ^= zobristNumbers[index][OPPONENT_TYPE(newState->opponentSpecial, 2)];
            }
            next:
        }
    }
}


// Add a general creation action from an index to an index
static inline void moveCreateGeneralActionAt(state_t* state, actions_t* actions, int index, int initialIndex) {
    uint64_t special = state->currentSpecial;
    for (int i = 0; i < 4; i++) { // Check if not special
        int pieceIndex = PIECE_INDEX(special, i);
        if (PIECE_HAS(special, i) && (initialIndex == pieceIndex || index == pieceIndex)) return;
    }
    state_t* newState = addAction(actions, state);
    BOARD_FALSE(newState->opponentPieces, initialIndex);
    for (int i = 0; i < 4; i++) { // Add general
        if (!PIECE_HAS(special, i)) {
            PIECE_TRUE(newState->opponentSpecial, i);
            PIECE_INDEX_SET(newState->opponentSpecial, i, index);
            if (i == 3) FOUR_GENERALS_TRUE(newState->opponentSpecial);
            break;
        }
    }
    newState->hash ^= zobristNumbers[initialIndex][OPPONENT_TYPE(newState->opponentSpecial, 0)];
    newState->hash ^= zobristNumbers[index][OPPONENT_TYPE(newState->opponentSpecial, 0)];
    newState->hash ^= zobristNumbers[index][OPPONENT_TYPE(newState->opponentSpecial, 1)];
}

// List all possible move actions to create a general
static void moveCreateGeneral(state_t* state, actions_t* actions) {
    uint64_t current = state->currentPieces;

    // Up
    uint64_t moves = BOARD_UP(current) & current;
    int index;
    uint64_t iter = ITER_START(moves);
    while (ITER_HAS(iter)) {
        ITER_NEXT(iter, index);
        moveCreateGeneralActionAt(state, actions, index, index + VERTICAL_SHIFT(1));
    }

    // Down
    moves = BOARD_DOWN(current) & current;
    iter = ITER_START(moves);
    while (ITER_HAS(iter)) {
        ITER_NEXT(iter, index);
        moveCreateGeneralActionAt(state, actions, index, index - VERTICAL_SHIFT(1));
    }

    // Left
    moves = BOARD_LEFT(current) & current;
    iter = ITER_START(moves);
    while (ITER_HAS(iter)) {
        ITER_NEXT(iter, index);
        moveCreateGeneralActionAt(state, actions, index, index + HORIZONTAL_SHIFT(1));
    }

    // Right
    moves = BOARD_RIGHT(current) & current;
    iter = ITER_START(moves);
    while (ITER_HAS(iter)) {
        ITER_NEXT(iter, index);
        moveCreateGeneralActionAt(state, actions, index, index - HORIZONTAL_SHIFT(1));
    }
}


void moveActions(state_t* state, actions_t* actions, bool forceAll) {
    if (CAN_CREATE_KING(state->currentSpecial)) {    
        moveCreateKing(state, actions);
    }
    if (forceAll || !CAN_CREATE_KING(state->currentSpecial)) {
        if (CAN_CREATE_GENERAL(state->currentSpecial)) {
            moveCreateGeneral(state, actions);
        }
        moveToEmpty(state, actions);
    }
}


void initialActions(state_t* state, actions_t* actions) {
    uint64_t special = state->currentSpecial;

    // Update firstMoves
    state_t newState = *state;
    if (FOUR_GENERALS(special) || (PIECE_HAS(special, 3) && COUNT_GENERALS(special) == 2)) {
        FIRST_MOVES_FALSE(newState.currentSpecial);
    }

    // Create king or general
    if (!PIECE_HAS(special, 3) || FOUR_GENERALS(special)) {
        moveCreateKing(&newState, actions);
    }
    if (!FOUR_GENERALS(special)) {
        moveCreateGeneral(&newState, actions);
    }
}


// Capture a piece
static inline void capturePiece(state_t* state, uint64_t* removed, uint32_t* removedSpecial, uint64_t* hash, int* captures, int index) {
    BOARD_TRUE(*removed, index);
    (*captures)++;
    for (int i = 0; i < 4; i++) {
        if (PIECE_HAS(state->opponentSpecial, i) && index == PIECE_INDEX(state->opponentSpecial, i)) {
            PIECE_TRUE(*removedSpecial, i);
            *captures += 1 + (i == 3);
            *hash ^= zobristNumbers[index][OPPONENT_TYPE(state->opponentSpecial, 1 + (i == 3))];
            return;
        }
    }
    *hash ^= zobristNumbers[index][OPPONENT_TYPE(state->opponentSpecial, 0)];
}

// Add a capture action
static inline void addCaptureAction(state_t* state, actions_t* actions, int index, uint64_t removed, uint32_t removedSpecial, uint64_t hash, int captures, int special) {
    if (captures < actions->captures) return;
    if (captures > actions->captures) {
        actions->length = 0;
        actions->captures = captures;
    }
    state_t* newState = addAction(actions, state);
    newState->currentPieces &= ~removed;
    newState->currentSpecial &= ~removedSpecial;
    newState->hash ^= hash;
    if (PIECE_HAS(removedSpecial, 3)) {
        CAN_CREATE_KING_TRUE(newState->currentSpecial);
        newState->hash ^= zobristNumberKing;
    }
    if (removedSpecial & GENERALS_MASK) {
        CAN_CREATE_GENERAL_TRUE(newState->currentSpecial);
        newState->hash ^= zobristNumberGeneral;
    }
    BOARD_TRUE(newState->opponentPieces, index);
    if (special != -1) PIECE_INDEX_SET(newState->opponentSpecial, special, index);
    newState->hash ^= zobristNumbers[index][OPPONENT_TYPE(newState->opponentSpecial, special == -1 ? 0 : 1 + (special == 3))];
}


// Check if a capture in a direction is valid
static inline bool checkCapture(state_t* state, int pieceI, int pieceJ, int di, int dj, int* newI, int* newJ, uint64_t* removed, uint32_t* removedSpecial, uint64_t* hash, int* captures) {
    int capturedI = pieceI + di;
    if (capturedI == -1 || capturedI == SI) return false;
    int capturedJ = pieceJ + dj;
    if (capturedJ == -1 || capturedJ == SJ) return false;
    int capturedIndex = INDEX(capturedI, capturedJ);
    uint64_t opponent = state->opponentPieces;
    if (BOARD_HAS(opponent, capturedIndex) && !BOARD_HAS(*removed, capturedIndex)) {
        *newI = capturedI + di;
        if (*newI == -1 || *newI == SI) return false;
        *newJ = capturedJ + dj;
        if (*newJ == -1 || *newJ == SJ) return false;
        int newIndex = INDEX(*newI, *newJ);
        uint64_t current = state->currentPieces;
        if (BOARD_HAS(current | opponent | *removed, newIndex)) return false;
        capturePiece(state, removed, removedSpecial, hash, captures, capturedIndex);
        return true;
    }
    return false;
}

// List capture actions starting from an index to an index
static void captureActionsAt(state_t* state, actions_t* actions, int pieceI, int pieceJ, uint64_t removed, uint32_t removedSpecial, uint64_t hash, int captures, int test) {
    bool captured = false;
    for (int i = 0; i < 4; i++) { // Straight movements
        int di = DIR_I(i), dj = DIR_J(i);
        int newI, newJ;
        uint64_t newRemoved = removed, newHash = hash;
        uint32_t newRemovedSpecial = removedSpecial;
        int newCaptures = captures;
        if (checkCapture(state, pieceI, pieceJ, di, dj, &newI, &newJ, &newRemoved, &newRemovedSpecial, &newHash, &newCaptures)) {
            captureActionsAt(state, actions, newI, newJ, newRemoved, newRemovedSpecial, newHash, newCaptures, test + 1);
            captured = true;
        }
    }
    if (!captured) addCaptureAction(state, actions, INDEX(pieceI, pieceJ), removed, removedSpecial, hash, captures, -1);
}

static inline void captureActionsDir(state_t* state, actions_t* actions, int initialIndex, int captureIndex, int newIndex) {
    BOARD_FALSE(state->currentPieces, initialIndex);
    uint64_t removed = 0, hash = zobristNumbers[initialIndex][CURRENT_TYPE(state->opponentSpecial, 0)];
    uint32_t removedSpecial = 0;
    int captures = 0;
    BOARD_TRUE(removed, initialIndex);
    capturePiece(state, &removed, &removedSpecial, &hash, &captures, captureIndex);
    captureActionsAt(state, actions, INDEX_I(newIndex), INDEX_J(newIndex), removed, removedSpecial, hash, captures, 0);
    BOARD_TRUE(state->currentPieces, initialIndex);
}

// List capture actions for a king starting from a position to a position
static void captureKingActionsAt(state_t* state, actions_t* actions, int pieceI, int pieceJ, uint64_t removed, uint32_t removedSpecial, uint64_t hash, int captures) {
    bool captured = false;
    for (int i = 0; i < 4; i++) { // Straight movements
        int di = DIR_I(i), dj = DIR_J(i);
        int newI, newJ;
        uint64_t newRemoved = removed, newHash = hash;
        uint32_t newRemovedSpecial = removedSpecial;
        int newCaptures = captures;
        if (checkCapture(state, pieceI, pieceJ, di, dj, &newI, &newJ, &newRemoved, &newRemovedSpecial, &newHash, &newCaptures)) {
            captureKingActionsAt(state, actions, newI, newJ, newRemoved, newRemovedSpecial, newHash, newCaptures);
            captured = true;
        }
    }
    for (int i = 0; i < 4; i++) { // Diagonal movements
        int di = DIAG_I(i), dj = DIAG_J(i);
        int newI, newJ;
        uint64_t newRemoved = removed, newHash = hash;
        uint32_t newRemovedSpecial = removedSpecial;
        int newCaptures = captures;
        if (checkCapture(state, pieceI, pieceJ, di, dj, &newI, &newJ, &newRemoved, &newRemovedSpecial, &newHash, &newCaptures)) {
            captureKingActionsAt(state, actions, newI, newJ, newRemoved, newRemovedSpecial, newHash, newCaptures);
            captured = true;
        }
    }
    if (!captured && captures > 0) addCaptureAction(state, actions, INDEX(pieceI, pieceJ), removed, removedSpecial, hash, captures, 3);
}


// List capture actions for a general starting from a position in a direction
static bool captureGeneralActionsUp(state_t* state, actions_t* actions, uint64_t blocking, uint64_t removed, uint32_t removedSpecial, uint64_t hash, int captures, int i);
static bool captureGeneralActionsDown(state_t* state, actions_t* actions, uint64_t blocking, uint64_t removed, uint32_t removedSpecial, uint64_t hash, int captures, int i);
static bool captureGeneralActionsLeft(state_t* state, actions_t* actions, uint64_t blocking, uint64_t removed, uint32_t removedSpecial, uint64_t hash, int captures, int i);
static bool captureGeneralActionsRight(state_t* state, actions_t* actions, uint64_t blocking, uint64_t removed, uint32_t removedSpecial, uint64_t hash, int captures, int i);

static bool captureGeneralActionsUp(state_t* state, actions_t* actions, uint64_t blocking, uint64_t removed, uint32_t removedSpecial, uint64_t hash, int captures, int i) {
    if (!blocking) return false;
    int firstBlocking = LAST(blocking);
    if (INDEX_I(firstBlocking) == 0) return false;
    if (!BOARD_HAS(state->opponentPieces, firstBlocking) || BOARD_HAS(removed, firstBlocking)) return false;
    int newIndex = firstBlocking - VERTICAL_SHIFT(1);
    if (BOARD_HAS(state->currentPieces | state->opponentPieces | removed, newIndex)) return false;
    capturePiece(state, &removed, &removedSpecial, &hash, &captures, firstBlocking);
    BOARD_FALSE(blocking, firstBlocking);
    uint64_t filled = state->currentPieces | state->opponentPieces | removed;
    bool captured = false;
    captured |= captureGeneralActionsUp(state, actions, blocking, removed, removedSpecial, hash, captures, i);
    for (; newIndex > -1 && !BOARD_HAS(blocking, newIndex); newIndex -= VERTICAL_SHIFT(1)) {
        uint64_t newBlocking = filled & MOVE_DOWN(UP_ROW, INDEX_I(newIndex));
        uint64_t newPiece = PIECE(newIndex);
        captured |= captureGeneralActionsLeft(state, actions, newBlocking & (newPiece-1), removed, removedSpecial, hash, captures, i);
        captured |= captureGeneralActionsRight(state, actions, newBlocking & ~((newPiece-1) | newPiece), removed, removedSpecial, hash, captures, i);
        if (!captured) addCaptureAction(state, actions, newIndex, removed, removedSpecial, hash, captures, i);
        captured = false;
    }
    return true;
}

static bool captureGeneralActionsDown(state_t* state, actions_t* actions, uint64_t blocking, uint64_t removed, uint32_t removedSpecial, uint64_t hash, int captures, int i) {
    if (!blocking) return false;
    int firstBlocking = FIRST(blocking);
    if (INDEX_I(firstBlocking) == SI - 1) return false;
    if (!BOARD_HAS(state->opponentPieces, firstBlocking) || BOARD_HAS(removed, firstBlocking)) return false;
    int newIndex = firstBlocking + VERTICAL_SHIFT(1);
    if (BOARD_HAS(state->currentPieces | state->opponentPieces | removed, newIndex)) return false;
    capturePiece(state, &removed, &removedSpecial, &hash, &captures, firstBlocking);
    BOARD_FALSE(blocking, firstBlocking);
    uint64_t filled = state->currentPieces | state->opponentPieces | removed;
    bool captured = false;
    captured |= captureGeneralActionsDown(state, actions, blocking, removed, removedSpecial, hash, captures, i);
    for (; newIndex < SI * SJ && !BOARD_HAS(blocking, newIndex); newIndex += VERTICAL_SHIFT(1)) {
        uint64_t newBlocking = filled & MOVE_DOWN(UP_ROW, INDEX_I(newIndex));
        uint64_t newPiece = PIECE(newIndex);
        captured |= captureGeneralActionsLeft(state, actions, newBlocking & (newPiece-1), removed, removedSpecial, hash, captures, i);
        captured |= captureGeneralActionsRight(state, actions, newBlocking & ~((newPiece-1) | newPiece), removed, removedSpecial, hash, captures, i);
        if (!captured) addCaptureAction(state, actions, newIndex, removed, removedSpecial, hash, captures, i);
        captured = false;
    }
    return true;
}

static bool captureGeneralActionsLeft(state_t* state, actions_t* actions, uint64_t blocking, uint64_t removed, uint32_t removedSpecial, uint64_t hash, int captures, int i) {
    if (!blocking) return false;
    int firstBlocking = LAST(blocking);
    if (INDEX_J(firstBlocking) == 0) return false;
    if (!BOARD_HAS(state->opponentPieces, firstBlocking) || BOARD_HAS(removed, firstBlocking)) return false;
    int newIndex = firstBlocking - HORIZONTAL_SHIFT(1);
    if (BOARD_HAS(state->currentPieces | state->opponentPieces | removed, newIndex)) return false;
    capturePiece(state, &removed, &removedSpecial, &hash, &captures, firstBlocking);
    BOARD_FALSE(blocking, firstBlocking);
    uint64_t filled = state->currentPieces | state->opponentPieces | removed;
    bool captured = false;
    captured |= captureGeneralActionsLeft(state, actions, blocking, removed, removedSpecial, hash, captures, i);
    for (; newIndex > -1 + VERTICAL_SHIFT(INDEX_I(firstBlocking)) && !BOARD_HAS(blocking, newIndex); newIndex -= HORIZONTAL_SHIFT(1)) {
        uint64_t newBlocking = filled & MOVE_RIGHT(LEFT_COLUMN, INDEX_J(newIndex));
        uint64_t newPiece = PIECE(newIndex);
        captured |= captureGeneralActionsUp(state, actions, newBlocking & (newPiece-1), removed, removedSpecial, hash, captures, i);
        captured |= captureGeneralActionsDown(state, actions, newBlocking & ~((newPiece-1) | newPiece), removed, removedSpecial, hash, captures, i);
        if (!captured) addCaptureAction(state, actions, newIndex, removed, removedSpecial, hash, captures, i);
        captured = false;
    }
    return true;
}

static bool captureGeneralActionsRight(state_t* state, actions_t* actions, uint64_t blocking, uint64_t removed, uint32_t removedSpecial, uint64_t hash, int captures, int i) {
    if (!blocking) return false;
    int firstBlocking = FIRST(blocking);
    if (INDEX_J(firstBlocking) == SJ - 1) return false;
    if (!BOARD_HAS(state->opponentPieces, firstBlocking) || BOARD_HAS(removed, firstBlocking)) return false;
    int newIndex = firstBlocking + HORIZONTAL_SHIFT(1);
    if (BOARD_HAS(state->currentPieces | state->opponentPieces | removed, newIndex)) return false;
    capturePiece(state, &removed, &removedSpecial, &hash, &captures, firstBlocking);
    BOARD_FALSE(blocking, firstBlocking);
    uint64_t filled = state->currentPieces | state->opponentPieces | removed;
    bool captured = false;
    captured |= captureGeneralActionsRight(state, actions, blocking, removed, removedSpecial, hash, captures, i);
    for (; newIndex < SJ + VERTICAL_SHIFT(INDEX_I(firstBlocking)) && !BOARD_HAS(blocking, newIndex); newIndex += HORIZONTAL_SHIFT(1)) {
        uint64_t newBlocking = filled & MOVE_RIGHT(LEFT_COLUMN, INDEX_J(newIndex));
        uint64_t newPiece = PIECE(newIndex);
        captured |= captureGeneralActionsUp(state, actions, newBlocking & (newPiece-1), removed, removedSpecial, hash, captures, i);
        captured |= captureGeneralActionsDown(state, actions, newBlocking & ~((newPiece-1) | newPiece), removed, removedSpecial, hash, captures, i);
        if (!captured) addCaptureAction(state, actions, newIndex, removed, removedSpecial, hash, captures, i);
        captured = false;
    }
    return true;
}


void captureActions(state_t* state, actions_t* actions) {
    uint64_t current = state->currentPieces;
    uint64_t opponent = state->opponentPieces;
    uint64_t filled = current | opponent;
    uint64_t empty = ~filled;
    uint64_t special = state->currentSpecial;

    // Keep only soldiers
    uint64_t soldiers = current;
    for (int i = 0; i < 4; i++) {
        if (PIECE_HAS(special, i)) {
            BOARD_FALSE(soldiers, PIECE_INDEX(special, i));
        }
    }

    // Up
    uint64_t captures = BOARD_UP(BOARD_UP(soldiers)) & BOARD_UP(opponent) & empty;
    int index;
    uint64_t iter = ITER_START(captures);
    while (ITER_HAS(iter)) {
        ITER_NEXT(iter, index);
        captureActionsDir(state, actions, index + VERTICAL_SHIFT(2), index + VERTICAL_SHIFT(1), index);
    }

    // Down
    captures = BOARD_DOWN(BOARD_DOWN(soldiers)) & BOARD_DOWN(opponent) & empty;
    iter = ITER_START(captures);
    while (ITER_HAS(iter)) {
        ITER_NEXT(iter, index);
        captureActionsDir(state, actions, index - VERTICAL_SHIFT(2), index - VERTICAL_SHIFT(1), index);
    }

    // Left
    captures = BOARD_LEFT(BOARD_LEFT(soldiers)) & BOARD_LEFT(opponent) & empty;
    iter = ITER_START(captures);
    while (ITER_HAS(iter)) {
        ITER_NEXT(iter, index);
        captureActionsDir(state, actions, index + HORIZONTAL_SHIFT(2), index + HORIZONTAL_SHIFT(1), index);
    }

    // Right
    captures = BOARD_RIGHT(BOARD_RIGHT(soldiers)) & BOARD_RIGHT(opponent) & empty;
    iter = ITER_START(captures);
    while (ITER_HAS(iter)) {
        ITER_NEXT(iter, index);
        captureActionsDir(state, actions, index - HORIZONTAL_SHIFT(2), index - HORIZONTAL_SHIFT(1), index);
    }

    // King
    if (PIECE_HAS(special, 3)) {
        int index = PIECE_INDEX(special, 3);
        int pieceI = INDEX_I(index);
        int pieceJ = INDEX_J(index);
        uint64_t removed = 0, hash = zobristNumbers[index][CURRENT_TYPE(state->opponentSpecial, 2)];
        BOARD_FALSE(state->currentPieces, index);
        BOARD_TRUE(removed, index);
        captureKingActionsAt(state, actions, pieceI, pieceJ, removed, 0, hash, 0);
        BOARD_TRUE(state->currentPieces, index);
    }

    // Generals
    for (int i = 0; i < 3; i++) {
        if (!PIECE_HAS(special, i)) continue;
        int index = PIECE_INDEX(special, i);
        uint64_t piece = PIECE(index);
        uint64_t before = piece - 1;
        uint64_t after = ~(before | piece);
        uint64_t row = filled & MOVE_DOWN(UP_ROW, INDEX_I(index));
        uint64_t column = filled & MOVE_RIGHT(LEFT_COLUMN, INDEX_J(index));
        uint64_t removed = 0, hash = zobristNumbers[index][CURRENT_TYPE(state->opponentSpecial, 1)];
        BOARD_FALSE(state->currentPieces, index);
        BOARD_TRUE(removed, index);
        captureGeneralActionsUp(state, actions, column & before, removed, 0, hash, 0, i);
        captureGeneralActionsDown(state, actions, column & after, removed, 0, hash, 0, i);
        captureGeneralActionsLeft(state, actions, row & before, removed, 0, hash, 0, i);
        captureGeneralActionsRight(state, actions, row & after, removed, 0, hash, 0, i);
        BOARD_TRUE(state->currentPieces, index);
    }
}


void allActions(state_t* state, actions_t* actions) {
    if (FIRST_MOVES(state->currentSpecial)) initialActions(state, actions);
    else {
        captureActions(state, actions);
        if (actions->length == 0) moveActions(state, actions, false);
    }
}


int16_t terminalScore(const state_t* state) {
    if (FIRST_MOVES(state->currentSpecial)) return NON_TERMINAL;
    if (!state->currentPieces) return -INT16_MAX;
    if (!state->opponentPieces) return INT16_MAX;
    if (!PIECE_HAS(state->opponentSpecial, 3)) return INT16_MAX;
    return NON_TERMINAL;
}



void readState(const signed char* serialized, state_t* state) {
    uint64_t currentPieces = 0;
    uint64_t opponentPieces = 0;
    uint32_t currentSpecial = 0;
    uint32_t opponentSpecial = 0;
    uint64_t hash = 0;

    signed char player = *(serialized++);
    if (player == 1) {
        PLAYER_SET(opponentSpecial, 1);
        hash ^= zobristNumberPlayer;
    }
    else PLAYER_SET(opponentSpecial, 0);
    int currentGeneral = 0;
    int opponentGeneral = 0;
    for (int i = 0; i < SI; i++) {
        for (int j = 0; j < SJ; j++) {
            signed char piece = *(serialized++);
            if (piece * player > 0) {
                uint64_t index = INDEX(i, j);
                BOARD_TRUE(currentPieces, index);
                if (piece == 3 || piece == -3) {
                    PIECE_TRUE(currentSpecial, 3);
                    PIECE_INDEX_SET(currentSpecial, 3, index);
                    hash ^= zobristNumbers[index][CURRENT_TYPE(opponentSpecial, 2)];
                }
                else if (piece == 2 || piece == -2) {
                    PIECE_TRUE(currentSpecial, currentGeneral);
                    PIECE_INDEX_SET(currentSpecial, currentGeneral, index);
                    currentGeneral++;
                    if (currentGeneral == 4) FOUR_GENERALS_TRUE(currentSpecial);
                    hash ^= zobristNumbers[index][CURRENT_TYPE(opponentSpecial, 1)];
                }
                else hash ^= zobristNumbers[index][CURRENT_TYPE(opponentSpecial, 0)];
            }
            else if (piece * player < 0) {
                uint64_t index = INDEX(i, j);
                BOARD_TRUE(opponentPieces, index);
                if (piece == 3 || piece == -3) {
                    PIECE_TRUE(opponentSpecial, 3);
                    PIECE_INDEX_SET(opponentSpecial, 3, index);
                    hash ^= zobristNumbers[index][OPPONENT_TYPE(opponentSpecial, 2)];
                }
                else if (piece == 2 || piece == -2) {
                    PIECE_TRUE(opponentSpecial, opponentGeneral);
                    PIECE_INDEX_SET(opponentSpecial, opponentGeneral, index);
                    opponentGeneral++;
                    if (opponentGeneral == 4) FOUR_GENERALS_TRUE(opponentSpecial);
                    hash ^= zobristNumbers[index][OPPONENT_TYPE(opponentSpecial, 1)];
                }
                else hash ^= zobristNumbers[index][OPPONENT_TYPE(opponentSpecial, 0)];
            }
        }
    }
    if (*(serialized++)) {
        CAN_CREATE_KING_TRUE(currentSpecial);
        hash ^= zobristNumberKing;
    }
    if (*(serialized++)) {
        CAN_CREATE_GENERAL_TRUE(currentSpecial);
        hash ^= zobristNumberGeneral;
    }
    char turn = *(serialized++);
    if (turn < 10) FIRST_MOVES_TRUE(currentSpecial);
    if (turn < 9) FIRST_MOVES_TRUE(opponentSpecial);

    state->currentPieces = currentPieces;
    state->opponentPieces = opponentPieces;
    state->currentSpecial = currentSpecial;
    state->opponentSpecial = opponentSpecial;
    state->hash = hash;
}


move_t moveTo(const state_t* from, const state_t* to, char* captures) {
    move_t move;
    move.nCaptures = 0;

    // Start
    uint64_t start = from->currentPieces & ~to->opponentPieces;
    int startIndex = FIRST(start);
    move.startI = INDEX_I(startIndex);
    move.startJ = INDEX_J(startIndex);

    // End
    uint64_t end = to->opponentPieces & ~from->currentPieces;
    int endIndex = 0;
    if (end) endIndex = FIRST(end);
    else {
        if (FOUR_GENERALS(from->currentSpecial)) {
            endIndex = PIECE_INDEX(to->opponentSpecial, 3);
        }
        else {
            for (int i = 0; i < 4; i++) {
                if (PIECE_HAS(to->opponentSpecial, i) && !PIECE_HAS(from->currentSpecial, i)) {
                    endIndex = PIECE_INDEX(to->opponentSpecial, i);
                    break;
                }
            }
        }
    }
    move.endI = INDEX_I(endIndex);
    move.endJ = INDEX_J(endIndex);

    // Captures
    uint64_t captured = from->opponentPieces & ~to->currentPieces;
    int index;
    uint64_t iter = ITER_START(captured);
    while (ITER_HAS(iter)) {
        ITER_NEXT(iter, index);
        captures[2*move.nCaptures] = INDEX_I(index);
        captures[2*move.nCaptures + 1] = INDEX_J(index);
        move.nCaptures++;
    }

    return move;
}


bool stateEqual(const state_t* state1, const state_t* state2) {
    // Pieces
    if (state1->currentPieces != state2->currentPieces) return false;
    if (state1->opponentPieces != state2->opponentPieces) return false;

    // Special pieces
    uint64_t currentGenerals1 = 0;
    for (int i = 0; i < 3 + FOUR_GENERALS(state1->currentSpecial); i++) {
        if (PIECE_HAS(state1->currentSpecial, i)) {
            currentGenerals1 |= PIECE(PIECE_INDEX(state1->currentSpecial, i));
        }
    }
    uint64_t currentGenerals2 = 0;
    for (int i = 0; i < 3 + FOUR_GENERALS(state2->currentSpecial); i++) {
        if (PIECE_HAS(state2->currentSpecial, i)) {
            currentGenerals2 |= PIECE(PIECE_INDEX(state2->currentSpecial, i));
        }
    }
    if (currentGenerals1 != currentGenerals2) return false;
    if (!FOUR_GENERALS(state1->currentSpecial)) {
        if (PIECE_HAS(state1->currentSpecial, 3) != PIECE_HAS(state2->currentSpecial, 3)) return false;
        if (PIECE_HAS(state1->currentSpecial, 3) && PIECE_INDEX(state1->currentSpecial, 3) != PIECE_INDEX(state2->currentSpecial, 3)) return false;
    }
    uint64_t opponentGenerals1 = 0;
    for (int i = 0; i < 3 + FOUR_GENERALS(state1->opponentSpecial); i++) {
        if (PIECE_HAS(state1->opponentSpecial, i)) {
            opponentGenerals1 |= PIECE(PIECE_INDEX(state1->opponentSpecial, i));
        }
    }
    uint64_t opponentGenerals2 = 0;
    for (int i = 0; i < 3 + FOUR_GENERALS(state2->opponentSpecial); i++) {
        if (PIECE_HAS(state2->opponentSpecial, i)) {
            opponentGenerals2 |= PIECE(PIECE_INDEX(state2->opponentSpecial, i));
        }
    }
    if (opponentGenerals1 != opponentGenerals2) return false;
    if (!FOUR_GENERALS(state1->opponentSpecial)) {
        if (PIECE_HAS(state1->opponentSpecial, 3) != PIECE_HAS(state2->opponentSpecial, 3)) return false;
        if (PIECE_HAS(state1->opponentSpecial, 3) && PIECE_INDEX(state1->opponentSpecial, 3) != PIECE_INDEX(state2->opponentSpecial, 3)) return false;
    }

    // Flags
    if (CAN_CREATE_KING(state1->currentSpecial) != CAN_CREATE_KING(state2->currentSpecial)) return false;
    if (CAN_CREATE_GENERAL(state1->currentSpecial) != CAN_CREATE_GENERAL(state2->currentSpecial)) return false;

    return true;
}


/*void printState(const state_t* state) {
    for (int i = 0; i < SI; i++) {
        for (int j = 0; j < SJ; j++) {
            uint64_t index = INDEX(i, j);
            int value = 0;
            for (int k = 0; k < 4; k++) {
                if (PIECE_HAS(state->currentSpecial, k) && PIECE_INDEX(state->currentSpecial, k) == index) {
                    if (k < 3 || FOUR_GENERALS(state->currentSpecial)) value = 2;
                    else value = 3;
                    goto print;
                }
            }
            for (int k = 0; k < 4; k++) {
                if (PIECE_HAS(state->opponentSpecial, k) && PIECE_INDEX(state->opponentSpecial, k) == index) {
                    if (k < 3 || FOUR_GENERALS(state->opponentSpecial)) value = -2;
                    else value = -3;
                    goto print;
                }
            }
            if (BOARD_HAS(state->currentPieces, index)) value = 1;
            else if (BOARD_HAS(state->opponentPieces, index)) value = -1;
            print: printf("%2d ", value);
        }
        printf("\n");
    }
    printf("%2d %2d %2d %2d %2d\n", 
        CAN_CREATE_KING(state->currentSpecial), 
        CAN_CREATE_GENERAL(state->currentSpecial), 
        FIRST_MOVES(state->currentSpecial), 
        FOUR_GENERALS(state->currentSpecial), 
        FOUR_GENERALS(state->opponentSpecial)
    );
}*/



"""